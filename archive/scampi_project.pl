#!/usr/bin/env perl

use Getopt::Long;
use POSIX qw(strftime);
use Term::ReadKey;  

my $date = strftime "%Y-%m-%d", localtime;

$h = 'localhost';
$u = 'scampi';
$p = 'magic';
$name = 'db_data';
print STDERR
"
 -----------------------------------------------------------------------
 | ScaMPI TOOLS                                                        |
 | Create project files                                                |
 -----------------------------------------------------------------------

 Will save a 'db_data.php' file to be used in other scripts.
 
 -p     Project name (short string like 'wheat') 
 -h     MySQL host [$h]
 -u     MySQL user name [$u]
 -p     MySQL password [$p]
 -d     MySQL database [equal to -p]
 -o     Output directory [.]
 -c     Create database and user (requires root)
 
 -----------------------------------------------------------------------
";

$o = './';
$opt = GetOptions (
  'p=s'       => \$project,    
  'host=s'    => \$h,
  'user=s'    => \$u,
  'pass=s'    => \$p,
  'db=s'      => \$d,
  'o=s'       => \$o,
  's'         => \$show,
  'c'         => \$create
);

die " FATAL ERROR:\n Project name has spaces.\n" if ($p=~/\s/);
$d = $project unless ($d);

die " FATAL ERROR:\n Missing parameters.\n" unless ($p and $h and $u and $p and $d);

if ($create) {
	open (O, ">$o$name.php") || die " FATAL ERROR:\n Unable to open \"$o$name.php\".\n";
	print O "CREATE DATABASE $d;\nCREATE USER '$u'\@'localhost' IDENTIFIED BY '$p';\nGRANT ALL ON $d.* TO '$u'\@'localhost';\n";
	close O;
	
	print STDERR "Enter MySQL administrative user name (blank for 'root'): ";
	$root = <STDIN>;
	chomp($root);
	$root = 'root' unless ($root);
	$pwd = getpwd("Enter MySQL administrative password:");
	chomp($pwd);
	$info = `mysql -u$root -p$pwd < $o$name.php 2>&1`;
	$traf = `rm -f $o$name.php`;
	die "\n  FATAL ERROR:\n  Could'n execute MySQL with administrative privileges:\n  $info" if ($info=~/ERROR/i);
	print STDERR "$info\n";
	
}

open (O, ">$o$name.php") || die " FATAL ERROR:\n Unable to open \"$o$name.php\".\n";

print O "<?php
// Automatically generated by 
\$scampi_project=\"$project\";
\$scampi_host=\"$h\";
\$scampi_user=\"$u\";
\$scampi_pass=\"$p\";
\$scampi_db=\"$d\";
\$scampi_created=\"$date\";

mysql_connect(\$scampi_host,\$scampi_user,\$scampi_pass) or die(\"<h2>ScaMPI</h2><p><strong>FATAL ERROR:</strong><br>Unable to connect to MySQL.\");
\@mysql_select_db(\$scampi_db) or die( \"<h2>ScaMPI</h2><p><strong>FATAL ERROR:</strong><br>Unable to select database: $db</p>\");

\$outdir = '/tmp';

?>
";

close O;
print STDERR " DB Config File written to: $o$name.php\n";

sub getpwd {
# REQUIRES:
# use Term::ReadKey;  
my $key = 0;                                                                                                                                                                                                   
my $password = "";                                                                                                                                                                                             

	print STDERR "$_[0] ";                                                                                                                                                                        
	ReadMode(4); #Disable the control keys                                                                                                                                                                         
	while(ord($key = ReadKey(0)) != 10)                                                                                                                                                                            
	{                                                                                                                                                                                                              
	    if(ord($key) == 127 || ord($key) == 8) {                                                                                                                                                                   
	        chop($password);                                                                                                                                                                                       
	        print STDERR "\b \b";                                                                                                                                                                                         
	    } elsif(ord($key) < 32) {                                                                                                                                                                                  
	    } else {                                                                                                                                                                                                   
	        $password = $password.$key;                                                                                                                                                                            
	        print STDERR " ";                                                                                                                                                                              
	    }                                                                                                                                                                                                          
	}                                                                                                                                                                                                              
	ReadMode(0); 
	print STDERR "\n";
	print STDERR "Got: \"$password\"\n" if ($show);
	return $password;   
}

